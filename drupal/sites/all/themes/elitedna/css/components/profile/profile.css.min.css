{"version":3,"sources":["components/profile/profile.scss","global/defaults/_mixins.scss","global/defaults/_typography.scss","global/defaults/_grid.scss","global/defaults/_functions.scss"],"names":[],"mappings":"AAmBG,qBChBD,sBACA,eCSiB,CFRnB,SACE,WAAY,CACZ,gCAEE,qBACA,qBAAsB,CACvB,cAEC,kBACA,gBCgEF,kBD9DE,sBGPE,gBACA,eCT+C,CJWlD,qBCoEC,cACA,YACA,WACA,gBAAsC,CDvEvC,gBC0EC,kBACA,MACA,OACA,QACA,QAAS,CDvEX,kBGVI,iBACA,gBHWF,eAAgB,CAFjB,qBCCD,eAIE,iBAjBF,sBDkBI,kBAAmB,CANtB,oBCCD,eAIE,iBAjBF,oBAAsD,CDsBnD,mCAxBL,SA2BI,iBAAkB,CApBpB,cAsBI,UACA,eACA,kBAAmB,CAjBvB,kBAoBI,UAAW,CACZ,CCmED,mCD/FF,cAgCI,mBACA,SAAU,CA1Bb,qBCCD,eAIE,iBAjBF,sBD2CM,kBAAmB,CA/BxB,oBCCD,eAIE,iBAjBF,qBAAsD,CD+CjD,CAAA","file":"profile.css","sourcesContent":["@import '../../global/defaults/config',\n'../../global/defaults/mixins',\n'../../global/defaults/grid',\n'../../global/defaults/typography';\n\n.profile {\n  font-size: 0;\n  &__img,\n  &__content {\n    display: inline-block;\n    vertical-align: middle;\n  }\n  &__img {\n    border-radius: 50%;\n    overflow: hidden;\n    @include aspect-ratio(1, 1);\n    margin-right: pc(50, $base);\n    @include col(3);\n  }\n  &__content {\n    @include col(9);\n    text-align: left;\n    h6 {\n      @include font-size(26);\n      @extend %OpenSansbold;\n      margin-bottom: 20px;\n    }\n    p {\n      @include font-size(20);\n    }\n  }\n  @include mq($max, $tablet) {\n    text-align: center;\n    &__img {\n      width: 50%;\n      max-width: none;\n      margin: 0 auto 40px;\n    }\n    &__content {\n      width: 100%;\n    }\n  }\n  @include mq($max, $mobile) {\n    &__img {\n      margin-bottom: 20px;\n      width: 70%;\n    }\n    &__content {\n      h6 {\n        @include font-size(22);\n        margin-bottom: 10px;\n      }\n      p {\n        @include font-size(14);\n      }\n    }\n  }\n}\n","@import 'functions';\n\n@mixin font($font-weight: $base-font-weight, $font-family: $primary-font-family) {\n  font-family: $font-family;\n  font-weight: $font-weight;\n}\n@mixin letter-spacing($ps-value, $font-size) {\n  letter-spacing: (($ps-value * $font-size) / 1000) + px;\n}\n@mixin clearfix {\n  &::before,\n  &::after {\n    content: '';\n    display: table;\n  }\n  &::after {\n    clear: both;\n  }\n}\n@mixin font-size($size, $line-height: null, $letter-spacing: null) {\n  font-size: $size + px;\n  @if $line-height {\n    line-height: $line-height;\n  } @else {\n    line-height: ($size + 10) + px;\n  }\n  @if $letter-spacing {\n    @include letter-spacing($letter-spacing, $size);\n  } @else {\n    @include letter-spacing(-30, $size);\n  }\n}\n// =============================================================================\n// REM Unit Converter\n// =============================================================================\n@mixin rem($property, $values) {\n  // Create a couple of empty lists as output buffers.\n  $font-size: $base-font-size;\n  $px-values: ();\n  $rem-values: ();\n\n  // Loop through the $values list\n  @each $value in $values {\n    // For each property value, if it's in rem or px, derive both rem and\n    // px values for it and add those to the end of the appropriate buffer.\n    // Ensure all pixel values are rounded to the nearest pixel.\n    @if $value == 0 or $value == 0px {\n      // 0 -- use it without a unit\n      $px-values: join($px-values, 0);\n      $rem-values: join($rem-values, 0);\n    } @else if type-of($value) == number and not unitless($value) and unit($value) == px {\n      // px value given - calculate rem value from font-size\n      $new-rem-value: $value / $font-size;\n      $px-values: join($px-values, round($value));\n      $rem-values: join($rem-values, #{$new-rem-value}rem);\n    } @else if type-of($value) == number and not unitless($value) and unit($value) == '%' {\n      // % value given - don't add px or rem\n      $px-values: join($px-values, #{$value});\n      $rem-values: join($rem-values, #{$value});\n    } @else if $value == auto {\n      // auto - don't add px or rem\n      $px-values: join($px-values, auto);\n      $rem-values: join($rem-values, auto);\n    } @else {\n      // unitless value - use those directly as rem and calculate the px-fallback\n      $px-values: join($px-values, round($value * $font-size));\n      $rem-values: join($rem-values, #{$value}rem);\n    }\n  }\n\n  // output the converted rules\n  #{$property}: $px-values;\n  #{$property}: $rem-values;\n}\n// =============================================================================\n// Aspect Ratio\n// =============================================================================\n@mixin aspect-ratio($width, $height) {\n  position: relative;\n  &::before {\n    display: block;\n    content: ' ';\n    width: 100%;\n    padding-top: ($height / $width) * 100%;\n  }\n  > * {\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n  }\n}\n// =============================================================================\n// Media Query\n// =============================================================================\n// Supports\n// @include mq($max, breakpoint) {}\n// @include mq('', min-breakpoint, max-breakpoint) {}\n// @include mq($min, breakpoint) {}\n@mixin mq($constraint, $viewport1, $viewport2: null) {\n  $vp1: $viewport1 / 16;\n  @if $constraint == $min {\n    @media screen and ($min: #{$vp1}em) {\n      @content;\n    }\n  } @else if $constraint == $max {\n    @media screen and ($max: #{$vp1}em) {\n      @content;\n    }\n  } @else {\n    $vp2: $viewport2 / 16;\n    @media screen and ($min: #{$vp1}em) and ($max: #{$vp2}em) {\n      @content;\n    }\n  }\n}\n// =============================================================================\n// Font Face\n// =============================================================================\n@mixin font-face($name, $path, $weight: null, $style: null, $exts: eot woff2 woff ttf svg) {\n  $src: null;\n\n  $extmods: (\n    eot: '?',\n    svg: '#' + str-replace($name, ' ', '_')\n  );\n\n  $formats: (\n    otf: 'opentype',\n    ttf: 'truetype'\n  );\n\n  @each $ext in $exts {\n    $extmod: if(map-has-key($extmods, $ext), $ext + map-get($extmods, $ext), $ext);\n    $format: if(map-has-key($formats, $ext), map-get($formats, $ext), $ext);\n    $src: append($src, url(quote($path + '.' + $extmod)) format(quote($format)), comma);\n  }\n\n  @font-face {\n    font-family: quote($name);\n    font-style: $style;\n    font-weight: $weight;\n    src: $src;\n  }\n}\n// =============================================================================\n// Angle\n// =============================================================================\n@mixin angle($pseudo, $flip: false, $angle: 3deg, $background: inherit) {\n  // Possible values for $pseudo are: before, after, both\n  @if $pseudo == 'before' or $pseudo == 'after' or $pseudo == 'both' {\n    position: relative;\n    z-index: 1;\n    $selector: if($pseudo == 'both', '&:before, &:after', '&:#{$pseudo}');\n\n    #{$selector} {\n      background: $background;\n      content: '';\n      display: block;\n      height: 50%;\n      left: 0;\n      position: absolute;\n      right: 0;\n      z-index: -1;\n      -webkit-backface-visibility: hidden; // for Chrome Windows\n    }\n\n    @if $pseudo == 'before' {\n      #{$selector} {\n        top: 0;\n\n        @if $flip {\n          transform: skewY($angle * -1);\n          transform-origin: 0 0;\n        } @else {\n          transform: skewY($angle);\n          transform-origin: 100% 0;\n        }\n      }\n    }\n\n    @if $pseudo == 'after' {\n      #{$selector} {\n        bottom: 0;\n\n        @if $flip {\n          transform: skewY($angle);\n          transform-origin: 0 100%;\n        } @else {\n          transform: skewY($angle * -1);\n          transform-origin: 100%;\n        }\n      }\n    }\n\n    @if $pseudo == 'both' {\n      &:before {\n        top: 0;\n\n        @if $flip {\n          transform: skewY($angle * -1);\n          transform-origin: 0 0;\n        } @else {\n          transform: skewY($angle);\n          transform-origin: 100% 0;\n        }\n      }\n\n      &:after {\n        bottom: 0;\n\n        @if $flip {\n          transform: skewY($angle);\n          transform-origin: 0 0;\n        } @else {\n          transform: skewY($angle * -1);\n          transform-origin: 100%;\n        }\n      }\n    }\n  }\n}\n","%MuseoSlab {\n  @include font(300, $museo-slab);\n}\n%MuseoSlabBold {\n  @include font(700, $museo-slab);\n}\n%OpenSans {\n  @include font(400);\n}\n%OpenSansSemibold {\n  @include font(600);\n}\n%OpenSansbold {\n  @include font(700);\n}\n%OpenSansExtrabold {\n  @include font(800);\n}\n","@import 'functions';\n\n// =============================================================================\n// Responsive Width\n// =============================================================================\n@mixin rspw($max-width, $context, $padding, $margin) {\n  @if ($context) {\n    @if ($max-width) {\n      $newcontext: ($context - $padding - $margin);\n      max-width: #{$max-width}px;\n      width: pc($max-width, $newcontext);\n    }\n  }\n}\n// =============================================================================\n// Column Creator\n// Supports\n// oneCol    - 115px\n// twoCol    - 250px\n// threeCol  - 385px\n// fourCol   - 520px\n// fiveCol   - 655px\n// sixCol    - 790px\n// sevenCol  - 925px\n// eightCol  - 1060px\n// nineCol   - 1195px\n// tenCol    - 1330px\n// elevenCol - 1465px\n// =============================================================================\n@mixin col($columns: null, $container: $base, $padding: 0, $margin: 0) {\n  $parent: $container;\n\n  @if $columns {\n    @if $columns <= 11 {\n      $width: (($columns * 115) + (($columns - 1) * 20));\n\n      @if ($container <= 12) {\n        $parent: (($container * 115) + (($container - 1) * 20));\n      }\n      @include rspw($width, $parent, $padding, $margin);\n      @content;\n    }\n  }\n}\n","@function pc($target, $context, $padding: 0) {\n  @return percentage($target / ($context - $padding));\n}\n@function rem($value) {\n  @return ($value / 16px);\n}\n"]}