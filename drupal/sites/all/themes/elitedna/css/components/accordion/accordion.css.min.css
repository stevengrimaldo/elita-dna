{"version":3,"sources":["components/accordion/accordion.scss","global/defaults/_mixins.scss","global/defaults/_typography.scss","global/defaults/_config.scss"],"names":[],"mappings":"AAmBK,0BChBH,sBACA,eCMiB,CFLjB,mBACE,eACA,iBAAkB,CAClB,yBCYF,eAEE,oBAfF,sBAAsD,CDGnD,sBAGD,sBACA,aGTa,CHUd,iBAEC,eACA,yCGba,CHcb,uBACE,kBACA,cAAe,CAFhB,0BCCH,eAEE,oBAfF,qBAAsD,CDYnD,2DASG,WACA,oBACA,kBACA,QACA,yBACA,QACA,0BAA2B,CAf9B,8BAkBG,WACA,WACA,OAAQ,CApBX,6BAuBG,YACA,UACA,WACA,qBAAwB,CACzB,wBAGD,aACA,gBACA,kBAAmB,CAHpB,0BC5BH,eAIE,iBAjBF,sBD+CM,kBAAmB,CACpB,oDAMK,QAAS,CAJhB,+CAQK,aAAc,CAjDrB,4BAsDG,oBAAqB,CACtB,mCA/DD,yBCYF,eAEE,oBAfF,oBAAsD,CDStD,iBAgEI,cAAe,CA7DjB,uBA+DI,kBAAmB,CA/DtB,0BCCH,eAEE,oBAfF,qBAAsD,CDYnD,8BAoEK,WACA,UAAW,CArEhB,6BAwEK,YACA,SAAU,CA5Cf,0BC5BH,eAIE,iBAjBF,sBD2FQ,iBAAkB,CACnB,CAAA","file":"accordion.css","sourcesContent":["@import '../../global/defaults/config',\n'../../global/defaults/mixins',\n'../../global/defaults/typography';\n\n.accordion {\n  &__header {\n    padding: 40px 0;\n    text-align: center;\n    &-title {\n      @include font-size(45, initial);\n    }\n  }\n  &--container {\n    background-color: $white;\n    color: $emperor;\n  }\n  &__item {\n    padding: 40px 0;\n    border-bottom: 1px solid rgba($emperor, .4);\n    &-title {\n      position: relative;\n      cursor: pointer;\n      h6 {\n        @include font-size(22, initial);\n        @extend %OpenSansSemibold;\n      }\n      &::before,\n      &::after {\n        content: '';\n        border-radius: 100px;\n        position: absolute;\n        right: 0;\n        background-color: $persimmon;\n        top: 50%;\n        transform: translateY(-50%);\n      }\n      &::before {\n        width: 30px;\n        height: 2px;\n        top: 50%;\n      }\n      &::after {\n        height: 30px;\n        width: 2px;\n        right: 15px;\n        transition: height 400ms;\n      }\n    }\n    &-answer {\n      display: none;\n      margin-top: 20px;\n      padding-right: 40px;\n      p {\n        @include font-size(16);\n        margin-bottom: 15px;\n      }\n    }\n    &--open {\n      .accordion__item {\n        &-title {\n          &::after {\n            height: 0;\n          }\n        }\n        &-answer {\n          display: block;\n        }\n      }\n    }\n    &:last-child {\n      border-bottom: 0 none;\n    }\n  }\n  @include mq($max, $tablet) {\n    &__header {\n      &-title {\n        @include font-size(30, initial);\n      }\n    }\n    &__item {\n      padding: 25px 0;\n      &-title {\n        padding-right: 26px;\n        h6 {\n          @include font-size(16, initial);\n        }\n        &::before {\n          width: 16px;\n          height: 2px;\n        }\n        &::after {\n          height: 16px;\n          right: 7px;\n        }\n      }\n      &-answer {\n        p {\n          @include font-size(14);\n          margin-bottom: 5px;\n        }\n      }\n    }\n  }\n}\n","@import 'functions';\n\n@mixin font($font-weight: $base-font-weight, $font-family: $primary-font-family) {\n  font-family: $font-family;\n  font-weight: $font-weight;\n}\n@mixin letter-spacing($ps-value, $font-size) {\n  letter-spacing: (($ps-value * $font-size) / 1000) + px;\n}\n@mixin clearfix {\n  &::before,\n  &::after {\n    content: '';\n    display: table;\n  }\n  &::after {\n    clear: both;\n  }\n}\n@mixin font-size($size, $line-height: null, $letter-spacing: null) {\n  font-size: $size + px;\n  @if $line-height {\n    line-height: $line-height;\n  } @else {\n    line-height: ($size + 10) + px;\n  }\n  @if $letter-spacing {\n    @include letter-spacing($letter-spacing, $size);\n  } @else {\n    @include letter-spacing(-30, $size);\n  }\n}\n// =============================================================================\n// REM Unit Converter\n// =============================================================================\n@mixin rem($property, $values) {\n  // Create a couple of empty lists as output buffers.\n  $font-size: $base-font-size;\n  $px-values: ();\n  $rem-values: ();\n\n  // Loop through the $values list\n  @each $value in $values {\n    // For each property value, if it's in rem or px, derive both rem and\n    // px values for it and add those to the end of the appropriate buffer.\n    // Ensure all pixel values are rounded to the nearest pixel.\n    @if $value == 0 or $value == 0px {\n      // 0 -- use it without a unit\n      $px-values: join($px-values, 0);\n      $rem-values: join($rem-values, 0);\n    } @else if type-of($value) == number and not unitless($value) and unit($value) == px {\n      // px value given - calculate rem value from font-size\n      $new-rem-value: $value / $font-size;\n      $px-values: join($px-values, round($value));\n      $rem-values: join($rem-values, #{$new-rem-value}rem);\n    } @else if type-of($value) == number and not unitless($value) and unit($value) == '%' {\n      // % value given - don't add px or rem\n      $px-values: join($px-values, #{$value});\n      $rem-values: join($rem-values, #{$value});\n    } @else if $value == auto {\n      // auto - don't add px or rem\n      $px-values: join($px-values, auto);\n      $rem-values: join($rem-values, auto);\n    } @else {\n      // unitless value - use those directly as rem and calculate the px-fallback\n      $px-values: join($px-values, round($value * $font-size));\n      $rem-values: join($rem-values, #{$value}rem);\n    }\n  }\n\n  // output the converted rules\n  #{$property}: $px-values;\n  #{$property}: $rem-values;\n}\n// =============================================================================\n// Aspect Ratio\n// =============================================================================\n@mixin aspect-ratio($width, $height) {\n  position: relative;\n  &::before {\n    display: block;\n    content: ' ';\n    width: 100%;\n    padding-top: ($height / $width) * 100%;\n  }\n  > * {\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n  }\n}\n// =============================================================================\n// Media Query\n// =============================================================================\n// Supports\n// @include mq($max, breakpoint) {}\n// @include mq('', min-breakpoint, max-breakpoint) {}\n// @include mq($min, breakpoint) {}\n@mixin mq($constraint, $viewport1, $viewport2: null) {\n  $vp1: $viewport1 / 16;\n  @if $constraint == $min {\n    @media screen and ($min: #{$vp1}em) {\n      @content;\n    }\n  } @else if $constraint == $max {\n    @media screen and ($max: #{$vp1}em) {\n      @content;\n    }\n  } @else {\n    $vp2: $viewport2 / 16;\n    @media screen and ($min: #{$vp1}em) and ($max: #{$vp2}em) {\n      @content;\n    }\n  }\n}\n// =============================================================================\n// Font Face\n// =============================================================================\n@mixin font-face($name, $path, $weight: null, $style: null, $exts: eot woff2 woff ttf svg) {\n  $src: null;\n\n  $extmods: (\n    eot: '?',\n    svg: '#' + str-replace($name, ' ', '_')\n  );\n\n  $formats: (\n    otf: 'opentype',\n    ttf: 'truetype'\n  );\n\n  @each $ext in $exts {\n    $extmod: if(map-has-key($extmods, $ext), $ext + map-get($extmods, $ext), $ext);\n    $format: if(map-has-key($formats, $ext), map-get($formats, $ext), $ext);\n    $src: append($src, url(quote($path + '.' + $extmod)) format(quote($format)), comma);\n  }\n\n  @font-face {\n    font-family: quote($name);\n    font-style: $style;\n    font-weight: $weight;\n    src: $src;\n  }\n}\n// =============================================================================\n// Angle\n// =============================================================================\n@mixin angle($pseudo, $flip: false, $angle: 3deg, $background: inherit) {\n  // Possible values for $pseudo are: before, after, both\n  @if $pseudo == 'before' or $pseudo == 'after' or $pseudo == 'both' {\n    position: relative;\n    z-index: 1;\n    $selector: if($pseudo == 'both', '&:before, &:after', '&:#{$pseudo}');\n\n    #{$selector} {\n      background: $background;\n      content: '';\n      display: block;\n      height: 50%;\n      left: 0;\n      position: absolute;\n      right: 0;\n      z-index: -1;\n      -webkit-backface-visibility: hidden; // for Chrome Windows\n    }\n\n    @if $pseudo == 'before' {\n      #{$selector} {\n        top: 0;\n\n        @if $flip {\n          transform: skewY($angle * -1);\n          transform-origin: 0 0;\n        } @else {\n          transform: skewY($angle);\n          transform-origin: 100% 0;\n        }\n      }\n    }\n\n    @if $pseudo == 'after' {\n      #{$selector} {\n        bottom: 0;\n\n        @if $flip {\n          transform: skewY($angle);\n          transform-origin: 0 100%;\n        } @else {\n          transform: skewY($angle * -1);\n          transform-origin: 100%;\n        }\n      }\n    }\n\n    @if $pseudo == 'both' {\n      &:before {\n        top: 0;\n\n        @if $flip {\n          transform: skewY($angle * -1);\n          transform-origin: 0 0;\n        } @else {\n          transform: skewY($angle);\n          transform-origin: 100% 0;\n        }\n      }\n\n      &:after {\n        bottom: 0;\n\n        @if $flip {\n          transform: skewY($angle);\n          transform-origin: 0 0;\n        } @else {\n          transform: skewY($angle * -1);\n          transform-origin: 100%;\n        }\n      }\n    }\n  }\n}\n","%MuseoSlab {\n  @include font(300, $museo-slab);\n}\n%MuseoSlabBold {\n  @include font(700, $museo-slab);\n}\n%OpenSans {\n  @include font(400);\n}\n%OpenSansSemibold {\n  @include font(600);\n}\n%OpenSansbold {\n  @include font(700);\n}\n%OpenSansExtrabold {\n  @include font(800);\n}\n","// Base Colors\n$white: #fff;\n$black: #000;\n\n// Colors\n$emperor: #4e4449;\n$persimmon: #ff6651;\n$cinnabar: #e8523d;\n$strikemaster: #94607e;\n$ecru: #f9f6f0;\n\n$text-color: $emperor;\n$link-color: $persimmon;\n$link-color-hover: $cinnabar;\n\n$base-font-size: 16px;\n$base-font-weight: 400;\n$base-line-height: 24px;\n$media-path-prod: '/sites/all/themes/elitedna/media';\n$media-path: '/media';\n$media-path: $media-path-prod;\n$image-path: $media-path + '/img';\n$svg-path: $media-path + '/svg';\n$font-path: $media-path + '/font';\n$svg-path-white: $media-path + '/svg/white';\n\n$open-sans: 'Open Sans';\n$museo-slab: 'MuseoSlab';\n\n$primary-font-family: $open-sans;\n$secondary-font-family: $museo-slab;\n$fallback: Helvetica, Arial, sans-serif;\n\n$base: 1800;\n$desktop: 1440px;\n$laptop: 1024;\n$tablet: 768;\n$phablet: 667;\n$mobile: 480;\n\n$min: 'min-width';\n$max: 'max-width';\n\n$module-padding: 80px;\n$half-module-padding: $module-padding / 2;\n"]}