{"version":3,"sources":["components/team/team.scss","global/defaults/_mixins.scss","global/defaults/_typography.scss","global/defaults/_grid.scss","global/defaults/_config.scss","global/defaults/_functions.scss"],"names":[],"mappings":"AAUI,oECPF,sBACA,eCGiB,CF0DT,uDC9DR,sBACA,eCMiB,CFQb,4DCfJ,sBACA,eCSiB,CFPjB,eACE,WGEE,gBACA,gBHDF,eAAgB,CAChB,qBCUF,eAEE,oBAfF,sBDMI,mBACA,aAAc,CACf,uBAEC,sCIZW,CJaX,gCCEJ,eAEE,oBAfF,sBDcM,yBACA,yBACA,kBACA,cAAe,CANjB,mCAQI,oBACA,mBAAoB,CATxB,6EAaI,WACA,oBACA,kBACA,QACA,yBACA,SACA,mCAAA,AAA2B,0BAAA,CAnB/B,uCAsBI,WACA,UAAW,CAvBf,sCA0BI,YACA,UACA,UACA,8BAAA,AAAwB,qBAAA,CACzB,oCAGD,aACA,oBACA,kBAAmB,CACnB,+CACE,mBCnCR,eAEE,oBAfF,sBDmDQ,cAAe,CAJjB,qDAMI,aItDO,CJgDX,0DAQM,yBAA0B,CAC3B,uDAID,aI7DO,CJ2DT,kEAKM,oBAAqB,CAhB7B,0DAqBI,eAAgB,CA3DxB,kCAgEI,yCI3ES,CJ4EV,mEAIK,QAAS,CACV,eAMP,YACA,kBACA,YGrFE,iBACA,gBHsFF,gBAAiB,CACjB,uBGxFE,gBACA,gBHyFA,qBACA,mBACA,qBACA,iBAAkB,CAClB,6BCzBJ,kBD2BM,gBACA,iBAAkB,CAHpB,oCCvBF,cACA,YACA,WACA,gBAAsC,CDoBpC,+BCjBF,kBACA,MACA,OACA,QACA,QAAS,CDaP,iCAKI,eACA,gBACA,WACA,YACA,MACA,SACA,mCAAA,AACA,2BAAA,kBACA,oBAAA,AAAiB,gBAAA,CAClB,4BCjGP,eAIE,iBAjBF,sBDkHM,eAAgB,CAFlB,+BAKI,oBACA,mBAAoB,CACrB,mCAKL,eACE,WACA,eACA,UAAW,CACZ,eAEC,WACA,eACA,WACA,eAAgB,CAChB,uBGpIA,gBACA,eET+C,CL8I9C,CCpCH,mCDyCE,uBG3IA,gBACA,gBH4IE,gBAAiB,CAClB,CC5CH,wCDiDE,uBGnJA,gBACA,eET+C,CL6J9C,CCnDH,mCDwDE,uBACE,eACA,UACA,cACA,cAAe,CAChB,CAAA","file":"team.css","sourcesContent":["@import '../../global/defaults/config',\n'../../global/defaults/mixins',\n'../../global/defaults/grid',\n'../../global/defaults/typography';\n\n.team {\n  &__filters {\n    float: left;\n    @include col(3);\n    text-align: left;\n    &-label {\n      @include font-size(14, initial);\n      @extend %OpenSans;\n      margin-bottom: 15px;\n      display: block;\n    }\n    &__filter {\n      border-top: 1px solid rgba($emperor, .3);\n      &-location {\n        @extend %OpenSansbold;\n        @include font-size(16, initial);\n        text-transform: uppercase;\n        padding: 15px 25px 15px 0;\n        position: relative;\n        cursor: pointer;\n        h4 {\n          font-family: inherit;\n          font-weight: inherit;\n        }\n        &::before,\n        &::after {\n          content: '';\n          border-radius: 100px;\n          position: absolute;\n          right: 0;\n          background-color: $persimmon;\n          top: 26px;\n          transform: translateY(-50%);\n        }\n        &::before {\n          width: 16px;\n          height: 2px;\n        }\n        &::after {\n          height: 16px;\n          width: 2px;\n          right: 7px;\n          transition: height 400ms;\n        }\n      }\n      &__departments {\n        display: none;\n        padding-bottom: 25px;\n        padding-right: 25px;\n        &-department {\n          margin-bottom: 10px;\n          @include font-size(14, initial);\n          @extend %OpenSans;\n          cursor: pointer;\n          &:hover {\n            color: $persimmon;\n            span {\n              text-decoration: underline;\n            }\n          }\n          &--active {\n            @extend %OpenSansSemibold;\n            color: $persimmon;\n            &:hover {\n              span {\n                text-decoration: none;\n              }\n            }\n          }\n          &:last-child {\n            margin-bottom: 0;\n          }\n        }\n      }\n      &:last-child {\n        border-bottom: 1px solid rgba($emperor, .3);\n      }\n      &--open {\n        .team__filters__filter-location {\n          &::after {\n            height: 0;\n          }\n        }\n      }\n    }\n  }\n  &__members {\n    font-size: 0;\n    text-align: center;\n    float: right;\n    @include col(10);\n    margin-top: -45px;\n    &__member {\n      @include col(2, 10);\n      display: inline-block;\n      vertical-align: top;\n      margin: 30px pc(35, $base);\n      text-align: center;\n      &-image {\n        @include aspect-ratio(1, 1);\n        overflow: hidden;\n        border-radius: 50%;\n        img {\n          min-width: 100%;\n          min-height: 100%;\n          width: auto;\n          height: auto;\n          top: 0; // 50%;\n          left: 50%;\n          transform: translateX(-50%); // translateY(-50%);\n          position: absolute;\n          object-fit: cover;\n        }\n      }\n      &-name {\n        @include font-size(14);\n        margin-top: 20px;\n        @extend %OpenSansbold;\n        h5 {\n          font-family: inherit;\n          font-weight: inherit;\n        }\n      }\n    }\n  }\n  @include mq($max, $laptop) {\n    &__filters {\n      float: none;\n      max-width: none;\n      width: 100%;\n    }\n    &__members {\n      float: none;\n      max-width: none;\n      width: 100%;\n      margin-top: 50px;\n      &__member {\n        @include col(2, 10);\n      }\n    }\n  }\n  @include mq($max, $tablet) {\n    &__members {\n      &__member {\n        @include col(3, 10);\n        margin: 20px 1.5%;\n      }\n    }\n  }\n  @include mq($max, $phablet) {\n    &__members {\n      &__member {\n        @include col(4, 10);\n      }\n    }\n  }\n  @include mq($max, $mobile) {\n    &__members {\n      &__member {\n        max-width: none;\n        width: 60%;\n        margin-left: 0;\n        margin-right: 0;\n      }\n    }\n  }\n}\n","@import 'functions';\n\n@mixin font($font-weight: $base-font-weight, $font-family: $primary-font-family) {\n  font-family: $font-family;\n  font-weight: $font-weight;\n}\n@mixin letter-spacing($ps-value, $font-size) {\n  letter-spacing: (($ps-value * $font-size) / 1000) + px;\n}\n@mixin clearfix {\n  &::before,\n  &::after {\n    content: '';\n    display: table;\n  }\n  &::after {\n    clear: both;\n  }\n}\n@mixin font-size($size, $line-height: null, $letter-spacing: null) {\n  font-size: $size + px;\n  @if $line-height {\n    line-height: $line-height;\n  } @else {\n    line-height: ($size + 10) + px;\n  }\n  @if $letter-spacing {\n    @include letter-spacing($letter-spacing, $size);\n  } @else {\n    @include letter-spacing(-30, $size);\n  }\n}\n// =============================================================================\n// REM Unit Converter\n// =============================================================================\n@mixin rem($property, $values) {\n  // Create a couple of empty lists as output buffers.\n  $font-size: $base-font-size;\n  $px-values: ();\n  $rem-values: ();\n\n  // Loop through the $values list\n  @each $value in $values {\n    // For each property value, if it's in rem or px, derive both rem and\n    // px values for it and add those to the end of the appropriate buffer.\n    // Ensure all pixel values are rounded to the nearest pixel.\n    @if $value == 0 or $value == 0px {\n      // 0 -- use it without a unit\n      $px-values: join($px-values, 0);\n      $rem-values: join($rem-values, 0);\n    } @else if type-of($value) == number and not unitless($value) and unit($value) == px {\n      // px value given - calculate rem value from font-size\n      $new-rem-value: $value / $font-size;\n      $px-values: join($px-values, round($value));\n      $rem-values: join($rem-values, #{$new-rem-value}rem);\n    } @else if type-of($value) == number and not unitless($value) and unit($value) == '%' {\n      // % value given - don't add px or rem\n      $px-values: join($px-values, #{$value});\n      $rem-values: join($rem-values, #{$value});\n    } @else if $value == auto {\n      // auto - don't add px or rem\n      $px-values: join($px-values, auto);\n      $rem-values: join($rem-values, auto);\n    } @else {\n      // unitless value - use those directly as rem and calculate the px-fallback\n      $px-values: join($px-values, round($value * $font-size));\n      $rem-values: join($rem-values, #{$value}rem);\n    }\n  }\n\n  // output the converted rules\n  #{$property}: $px-values;\n  #{$property}: $rem-values;\n}\n// =============================================================================\n// Aspect Ratio\n// =============================================================================\n@mixin aspect-ratio($width, $height) {\n  position: relative;\n  &::before {\n    display: block;\n    content: ' ';\n    width: 100%;\n    padding-top: ($height / $width) * 100%;\n  }\n  > * {\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n  }\n}\n// =============================================================================\n// Media Query\n// =============================================================================\n// Supports\n// @include mq($max, breakpoint) {}\n// @include mq('', min-breakpoint, max-breakpoint) {}\n// @include mq($min, breakpoint) {}\n@mixin mq($constraint, $viewport1, $viewport2: null) {\n  $vp1: $viewport1 / 16;\n  @if $constraint == $min {\n    @media screen and ($min: #{$vp1}em) {\n      @content;\n    }\n  } @else if $constraint == $max {\n    @media screen and ($max: #{$vp1}em) {\n      @content;\n    }\n  } @else {\n    $vp2: $viewport2 / 16;\n    @media screen and ($min: #{$vp1}em) and ($max: #{$vp2}em) {\n      @content;\n    }\n  }\n}\n// =============================================================================\n// Font Face\n// =============================================================================\n@mixin font-face($name, $path, $weight: null, $style: null, $exts: eot woff2 woff ttf svg) {\n  $src: null;\n\n  $extmods: (\n    eot: '?',\n    svg: '#' + str-replace($name, ' ', '_')\n  );\n\n  $formats: (\n    otf: 'opentype',\n    ttf: 'truetype'\n  );\n\n  @each $ext in $exts {\n    $extmod: if(map-has-key($extmods, $ext), $ext + map-get($extmods, $ext), $ext);\n    $format: if(map-has-key($formats, $ext), map-get($formats, $ext), $ext);\n    $src: append($src, url(quote($path + '.' + $extmod)) format(quote($format)), comma);\n  }\n\n  @font-face {\n    font-family: quote($name);\n    font-style: $style;\n    font-weight: $weight;\n    src: $src;\n  }\n}\n// =============================================================================\n// Angle\n// =============================================================================\n@mixin angle($pseudo, $flip: false, $angle: 3deg, $background: inherit) {\n  // Possible values for $pseudo are: before, after, both\n  @if $pseudo == 'before' or $pseudo == 'after' or $pseudo == 'both' {\n    position: relative;\n    z-index: 1;\n    $selector: if($pseudo == 'both', '&:before, &:after', '&:#{$pseudo}');\n\n    #{$selector} {\n      background: $background;\n      content: '';\n      display: block;\n      height: 50%;\n      left: 0;\n      position: absolute;\n      right: 0;\n      z-index: -1;\n      -webkit-backface-visibility: hidden; // for Chrome Windows\n    }\n\n    @if $pseudo == 'before' {\n      #{$selector} {\n        top: 0;\n\n        @if $flip {\n          transform: skewY($angle * -1);\n          transform-origin: 0 0;\n        } @else {\n          transform: skewY($angle);\n          transform-origin: 100% 0;\n        }\n      }\n    }\n\n    @if $pseudo == 'after' {\n      #{$selector} {\n        bottom: 0;\n\n        @if $flip {\n          transform: skewY($angle);\n          transform-origin: 0 100%;\n        } @else {\n          transform: skewY($angle * -1);\n          transform-origin: 100%;\n        }\n      }\n    }\n\n    @if $pseudo == 'both' {\n      &:before {\n        top: 0;\n\n        @if $flip {\n          transform: skewY($angle * -1);\n          transform-origin: 0 0;\n        } @else {\n          transform: skewY($angle);\n          transform-origin: 100% 0;\n        }\n      }\n\n      &:after {\n        bottom: 0;\n\n        @if $flip {\n          transform: skewY($angle);\n          transform-origin: 0 0;\n        } @else {\n          transform: skewY($angle * -1);\n          transform-origin: 100%;\n        }\n      }\n    }\n  }\n}\n","%MuseoSlab {\n  @include font(300, $museo-slab);\n}\n%MuseoSlabBold {\n  @include font(700, $museo-slab);\n}\n%OpenSans {\n  @include font(400);\n}\n%OpenSansSemibold {\n  @include font(600);\n}\n%OpenSansbold {\n  @include font(700);\n}\n%OpenSansExtrabold {\n  @include font(800);\n}\n","@import 'functions';\n\n// =============================================================================\n// Responsive Width\n// =============================================================================\n@mixin rspw($max-width, $context, $padding, $margin) {\n  @if ($context) {\n    @if ($max-width) {\n      $newcontext: ($context - $padding - $margin);\n      max-width: #{$max-width}px;\n      width: pc($max-width, $newcontext);\n    }\n  }\n}\n// =============================================================================\n// Column Creator\n// Supports\n// oneCol    - 115px\n// twoCol    - 250px\n// threeCol  - 385px\n// fourCol   - 520px\n// fiveCol   - 655px\n// sixCol    - 790px\n// sevenCol  - 925px\n// eightCol  - 1060px\n// nineCol   - 1195px\n// tenCol    - 1330px\n// elevenCol - 1465px\n// =============================================================================\n@mixin col($columns: null, $container: $base, $padding: 0, $margin: 0) {\n  $parent: $container;\n\n  @if $columns {\n    @if $columns <= 11 {\n      $width: (($columns * 115) + (($columns - 1) * 20));\n\n      @if ($container <= 12) {\n        $parent: (($container * 115) + (($container - 1) * 20));\n      }\n      @include rspw($width, $parent, $padding, $margin);\n      @content;\n    }\n  }\n}\n","// Base Colors\n$white: #fff;\n$black: #000;\n\n// Colors\n$emperor: #4e4449;\n$persimmon: #ff6651;\n$cinnabar: #e8523d;\n$strikemaster: #94607e;\n$ecru: #f9f6f0;\n\n$text-color: $emperor;\n$link-color: $persimmon;\n$link-color-hover: $cinnabar;\n\n$base-font-size: 16px;\n$base-font-weight: 400;\n$base-line-height: 24px;\n$media-path-prod: '/sites/all/themes/elitedna/media';\n$media-path: '/media';\n$media-path: $media-path-prod;\n$image-path: $media-path + '/img';\n$svg-path: $media-path + '/svg';\n$font-path: $media-path + '/font';\n$svg-path-white: $media-path + '/svg/white';\n\n$open-sans: 'Open Sans';\n$museo-slab: 'MuseoSlab';\n\n$primary-font-family: $open-sans;\n$secondary-font-family: $museo-slab;\n$fallback: Helvetica, Arial, sans-serif;\n\n$base: 1800;\n$desktop: 1440px;\n$laptop: 1024;\n$tablet: 768;\n$phablet: 667;\n$mobile: 480;\n\n$min: 'min-width';\n$max: 'max-width';\n\n$module-padding: 80px;\n$half-module-padding: $module-padding / 2;\n","@function pc($target, $context, $padding: 0) {\n  @return percentage($target / ($context - $padding));\n}\n@function rem($value) {\n  @return ($value / 16px);\n}\n"]}